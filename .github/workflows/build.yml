name: Build

on: [push, pull_request]

permissions:
  # Required for Electron Builder to create and update releases on Github
  contents: write

env:
  DEPENDENCIES_BOT_NAME: "dependabot[bot]"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os}}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v6
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Validate commit messages - last push commit
        if: github.event_name == 'push' && github.event.pusher.name != env.DEPENDENCIES_BOT_NAME
        run: npx commitlint --last --verbose
      - name: Validate commit messages - PR's commits
        if: github.event_name == 'pull_request' && github.event.pull_request.user.login != env.DEPENDENCIES_BOT_NAME
        run: npx commitlint --from "${{ github.event.pull_request.base.sha }}" --to "${{ github.event.pull_request.head.sha }}" --verbose
      - name: Run code checks
        run: npm run check
      - name: Run test
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            xvfb-run npm run test
          else
            npm run test
          fi
      - name: Build macOS with signing & notarization
        if: ${{ matrix.os == 'macos-latest' && github.event_name == 'push' && github.ref_name == 'main' }}
        timeout-minutes: 15
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: |
          set -euo pipefail

          # @electron/notarize (used by electron-builder) requires the API key to be stored in a file
          mkdir -p "$HOME/keys"
          KEY_FILE="$HOME/keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8"
          printf "%s" "${{ secrets.APPLE_API_KEY }}" | base64 --decode > "$KEY_FILE"
          chmod 600 "$KEY_FILE"

          # Clean up the key file
          trap 'rm -f -- "${KEY_FILE:-}"' EXIT INT TERM

          export APPLE_API_KEY="$KEY_FILE"

          npm run build -- --x64 --arm64
      - name: Build base
        if: ${{ !(matrix.os == 'macos-latest' && github.event_name == 'push' && github.ref_name == 'main') }}
        timeout-minutes: 15
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_name }}" = "main" ]; then
            npm run build -- --x64 --arm64
          else
            npm run build -- --x64 --arm64 --publish=never
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            dist/latest*.yml
            dist/*.exe
            dist/*.AppImage
            dist/*.dmg
            dist/*.rpm
            dist/*.deb
            dist/*.zip
            dist/*.blockmap
          retention-days: 1
